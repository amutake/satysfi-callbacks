@require: list

module Callbacks : sig
  type 'a t
  val make : unit -> 'a t
  val run : 'a -> 'a t -> unit
  val register : ('a -> unit) -> 'a t -> unit
end = struct
  type 'a t = Callbacks of (('a -> unit) list) ref
  let make () =
    let-mutable fs <- [] in
    Callbacks fs
  let run e (Callbacks fs) =
    List.iter (fun f -> f e) !fs
  let register f (Callbacks fs) =
    fs <- f :: !fs
end
